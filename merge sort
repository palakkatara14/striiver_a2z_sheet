class Solution {

    
    void mergeSort(int arr[], int l, int r) {
        if (l >= r) {
            return;
        }

        
        int mid = l + (r - l) / 2;

        
        mergeSort(arr, l, mid);
        mergeSort(arr, mid + 1, r);

        
        conquer(arr, l, mid, r);
    }

    
    void conquer(int[] arr, int l, int mid, int r) {
        int[] mergedArray = new int[r - l + 1];
        int index1=l;
        int index2 = mid + 1;  
        int x = 0;             

       
        while (index1 <= mid && index2 <= r) {
            if (arr[index1] <= arr[index2]) {
                mergedArray[x++] = arr[index1++];
            } 
            else {
                mergedArray[x++] = arr[index2++];
            }
        }

     
        while (index1 <= mid) {
            mergedArray[x++] = arr[index1++];
        }

        
        while (index2 <= r) {
            mergedArray[x++] = arr[index2++];
        }

        for (int i = 0; i < mergedArray.length; i++) {
            arr[l + i] = mergedArray[i];
        }
    }

  
    
}
